**********************************************************************

The following is the process of making the Makefile.
This includes:
      The building of the new masm tool
      The assembly into object files of each of the 3 test files

**********************************************************************


[cdistasi@mercury1 cole_distasio_hw4]$ make
gcc -c -g mic1_symasm.c
mic1_symasm.c:96:2: warning: implicit declaration of function 'unlink' is invalid in C99
      [-Wimplicit-function-declaration]
        unlink("/tmp/passone");
        ^
mic1_symasm.c:97:18: warning: using the result of an assignment as a condition without parentheses
      [-Wparentheses]
        while(tok=yylex()){
              ~~~^~~~~~~~
mic1_symasm.c:97:18: note: place parentheses around the assignment to silence this warning
        while(tok=yylex()){
                 ^
              (          )
mic1_symasm.c:97:18: note: use '==' to turn this assignment into an equality comparison
        while(tok=yylex()){
                 ^
                 ==
2 warnings generated.
flex mic1_symasm.ll
gcc -c -g lex.yy.c
gcc -o masm_nr mic1_symasm.o lex.yy.o
./masm_nr < a4_rshift_test.asm > rshift.o
./masm_nr < a4_mult_test.asm > mult.o
./masm_nr < a4_div_test.asm > div.o
[cdistasi@mercury1 cole_distasio_hw4]$ 

**********************************************************************

End of Build/Makefile section

**********************************************************************
**********************************************************************

RSHIFT TEST:
The following is the running of the RSHIFT test

**********************************************************************

[cdistasi@mercury1 cole_distasio_hw4]$ ./mic1 out.dat rshift.o 0 2000

Read in 180 micro instructions
Read in 25 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000000011  , or     3  or signed      3
Accumulator    : 0000110101111011  , or  3451  or signed   3451
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111010000  , or  2000  or signed   2000
ARegister      : 0000000000001111  , or    15  or signed     15
BRegister      : 1111111111111111  , or 65535  or signed     -1
CRegister      : 0000000000000000  , or     0  or signed      0
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 0000000000000000  , or     0  or signed      0
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 179
Total cycles   : 41

****** NOTE: Given 3451, shifting 0 times will give us the same result in the AC. *******

Read in 180 micro instructions
Read in 25 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000000101  , or     5  or signed      5
Accumulator    : 0000010000000000  , or  1024  or signed   1024
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111010000  , or  2000  or signed   2000
ARegister      : 0000000000001111  , or    15  or signed     15
BRegister      : 1111111111111111  , or 65535  or signed     -1
CRegister      : 0000000000000000  , or     0  or signed      0
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 0000000000000000  , or     0  or signed      0
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 179
Total cycles   : 75

****** NOTE: Given 8192, shifting 3 times, like dividing by 8, will give us the result of 1024 in the AC. *******

Read in 180 micro instructions
Read in 25 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000000111  , or     7  or signed      7
Accumulator    : 0000000111000000  , or   448  or signed    448
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111010000  , or  2000  or signed   2000
ARegister      : 0000000000001111  , or    15  or signed     15
BRegister      : 1111111111111111  , or 65535  or signed     -1
CRegister      : 0000000000000000  , or     0  or signed      0
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 0000000000000000  , or     0  or signed      0
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 179
Total cycles   : 117

****** NOTE: Given -8192, shifting 7 times will give us the result of 448 in the AC. *******

Read in 180 micro instructions
Read in 25 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000001001  , or     9  or signed      9
Accumulator    : 0000000000000001  , or     1  or signed      1
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111010000  , or  2000  or signed   2000
ARegister      : 0000000000001111  , or    15  or signed     15
BRegister      : 1111111111111111  , or 65535  or signed     -1
CRegister      : 0000000000000000  , or     0  or signed      0
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 0000000000000000  , or     0  or signed      0
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 179
Total cycles   : 175

****** NOTE: Given -32768, shifting 15 times will give us the result of 1 in the AC. *******

Read in 180 micro instructions
Read in 25 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000001011  , or    11  or signed     11
Accumulator    : 0000000000111011  , or    59  or signed     59
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111010000  , or  2000  or signed   2000
ARegister      : 0000000000001111  , or    15  or signed     15
BRegister      : 1111111111111111  , or 65535  or signed     -1
CRegister      : 0000000000000000  , or     0  or signed      0
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 0000000000000000  , or     0  or signed      0
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 179
Total cycles   : 211

****** NOTE: Given 944, shifting 4 times will give us the result of 59 in the AC. *******

**********************************************************************

End of RSHIFT Test section

**********************************************************************
**********************************************************************

MULT TEST:
The following is the running of the MULT test

**********************************************************************

[cdistasi@mercury1 cole_distasio_hw4]$ ./mic1 out.dat mult.o 0 2000

Read in 180 micro instructions
Read in 36 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000

************************************************************************
Removed unecessary debug views. Showed 2 examples, one with successful multiplication
which resulted in a 0 in the Accumulator. And one with bad multiplication
which resulted with -1 in the Accumulator.
************************************************************************

Type address to view memory, [q]uit, [c]ontinue, <Enter> for symbol table:
c

ProgramCounter : 0000000000000100  , or     4  or signed      4
Accumulator    : 0000000000000000  , or     0  or signed      0 << Note successful multiplication
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111001111  , or  1999  or signed   1999
ARegister      : 0000100111101110  , or  2542  or signed   2542
BRegister      : 0000000000111111  , or    63  or signed     63
CRegister      : 0000000000000000  , or     0  or signed      0
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 0000000000000000  , or     0  or signed      0
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 0
Total cycles   : 143

Type address to view memory, [q]uit, [c]ontinue, <Enter> for symbol table:
c

ProgramCounter : 0000000000010000  , or    16  or signed     16
Accumulator    : 1111111111111111  , or 65535  or signed     -1 << Note bad multiplication - overflow
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111001100  , or  1996  or signed   1996
ARegister      : 1111100000000000  , or 63488  or signed  -2048
BRegister      : 0000000000111111  , or    63  or signed     63
CRegister      : 0000000000000001  , or     1  or signed      1
DRegister      : 1000000000000000  , or 32768  or signed -32768
ERegister      : 1000000000000000  , or 32768  or signed -32768
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 0
Total cycles   : 1304


****** NOTE- AC has value of negative 1 because the operation overflowed. ******

....

Type address to view memory, [q]uit, [c]ontinue, <Enter> for symbol table:
2000
     the location 2000 has value 1111111111111111 , or 65535  or signed     -1
Type  <Enter>  to continue debugging
Type        q  to quit
Type        f for forward range
Type        b for backward range:
b
Type the number of reverse locations to dump: 6
     the location 1994 has value 0000000000000000 , or     0  or signed      0 << -1 x 55. Can only do positive.
     the location 1995 has value 0000001011001011 , or   715  or signed    715 << 715 x 49. Overflow
     the location 1996 has value 1111100000000000 , or 63488  or signed  -2048 << -2048 x 16. Overflow so keep og value in stack << 715 x 49. Overflow
     the location 1997 has value 0111111111111000 , or 32760  or signed  32760 << 520 x 63
     the location 1998 has value 1100101110101110 , or 52142  or signed -13394 << -362 x 37
     the location 1999 has value 0000000000000000 , or     0  or signed      0 << 2542 x 0
     the location 2000 has value 1111111111111111 , or 65535  or signed     -1


***** NOTE - The products of the operations in the stack *******

**********************************************************************

End of MULT Test section

**********************************************************************
**********************************************************************

DIV TEST:
The following is the running of the Div test

**********************************************************************

[cdistasi@mercury1 cole_distasio_hw4]$ ./mic1 out.dat div.o 0 2000

************************************************************************
Removed unecessary debug views. Showed 2 examples, one with successful division
which resulted in a 0 in the Accumulator. And one with bad division
which resulted with -1 in the Accumulator.
************************************************************************

Read in 180 micro instructions
Read in 52 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000001011  , or    11  or signed     11
Accumulator    : 1111111111111111  , or 65535  or signed     -1 <<<<<<< Bad division
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011111001000  , or  1992  or signed   1992
ARegister      : 0000000110110101  , or   437  or signed    437
BRegister      : 0000000000000000  , or     0  or signed      0
CRegister      : 1111111100101111  , or 65327  or signed   -209
DRegister      : 0000000000000000  , or     0  or signed      0
ERegister      : 1111111111111111  , or 65535  or signed     -1
FRegister      : 1111111111111111  , or 65535  or signed     -1

MicroPC        : 179
Total cycles   : 167

****** NOTE: the -1 in the AC which is a flag to set when bad division, divide by 0, happens. *******

....


Read in 180 micro instructions
Read in 52 machine instructions
Read in 0 symbol table entries
Starting PC is : 0000000000000000  base 10:       0
Starting SP is : 0000011111010000  base 10:    2000


ProgramCounter : 0000000000011111  , or    31  or signed     31
Accumulator    : 0000000000000000  , or     0  or signed      0 <<<<< Good division
InstructionReg : 1111111111000000  , or 65472  or signed    -64
TempInstr      : 1100000000000000  , or 49152  or signed -16384
StackPointer   : 0000011110111000  , or  1976  or signed   1976
ARegister      : 0001111111111111  , or  8191  or signed   8191
BRegister      : 0000000000010001  , or    17  or signed     17
CRegister      : 0010000000000010  , or  8194  or signed   8194
DRegister      : 0000000111100001  , or   481  or signed    481
ERegister      : 0000000000001110  , or    14  or signed     14
FRegister      : 0000000000000000  , or     0  or signed      0

MicroPC        : 179
Total cycles   : 10324

Type address to view memory, [q]uit, [c]ontinue, <Enter> for symbol table:
2000
     the location 2000 has value 1111111111111111 , or 65535  or signed     -1
Type  <Enter>  to continue debugging
Type        q  to quit
Type        f for forward range
Type        b for backward range:
b
Type the number of reverse locations to dump: 25
     the location 1975 has value 1111111111111111 , or 65535  or signed     -1
     the location 1976 has value 0000000000001110 , or    14  or signed     14 < remainder
     the location 1977 has value 0000000111100001 , or   481  or signed    481 < quotient
     the location 1978 has value 0001111111111111 , or  8191  or signed   8191 < dnd6
     the location 1979 has value 0000000000010001 , or    17  or signed     17 < div6
     the location 1980 has value 0000000000000000 , or     0  or signed      0 < remainder
     the location 1981 has value 0000000000000000 , or     0  or signed      0 < quotient
     the location 1982 has value 0000000000000000 , or     0  or signed      0 < dnd5
     the location 1983 has value 0000000111111111 , or   511  or signed    511 < div5
     the location 1984 has value 0000000011111111 , or   255  or signed    255 < remainder
     the location 1985 has value 1111111110100001 , or 65441  or signed    -95 < quotient
     the location 1986 has value 0101111111111111 , or 24575  or signed  24575 < dnd4
     the location 1987 has value 1111111100000000 , or 65280  or signed   -256 < div4
     the location 1988 has value 0000000000000111 , or     7  or signed      7 < remainder
     the location 1989 has value 0000001000000000 , or   512  or signed    512 < quotient
     the location 1990 has value 1101111111111001 , or 57337  or signed  -8199 < dnd3
     the location 1991 has value 1111111111110000 , or 65520  or signed    -16 < div3
     the location 1992 has value 1111111111111111 , or 65535  or signed     -1 < remainder should be -1 per spec.
     the location 1993 has value 0000000000000000 , or     0  or signed      0 < quotient
     the location 1994 has value 0000000110110101 , or   437  or signed    437 < dnd2
     the location 1995 has value 0000000000000000 , or     0  or signed      0 < div2
     the location 1996 has value 0001001101001111 , or  4943  or signed   4943 < remainder
     the location 1997 has value 0000000000000000 , or     0  or signed      0 < quotient
     the location 1998 has value 0001001101001111 , or  4943  or signed   4943 < dnd1
     the location 1999 has value 1110101111100000 , or 60384  or signed  -5152 < div1
     the location 2000 has value 1111111111111111 , or 65535  or signed     -1
Type address to view memory, [q]uit, [c]ontinue, <Enter> for symbol table:


**********************************************************************

End of DIV Test section

**********************************************************************